
<span title="The name of the data provider.">
  <p><label for="name">Name</label><br/>
  <%= f.text_field :name %></p>
</span>
         
<span title="Brief description of the data provider.">
  <p><label for="description">Description</label><br/>
  <%= f.text_field :description %></p>
</span>

<span title="Type of data provider.">
  <p><label for="type">Type</label><br/>
  <%= f.select :type, @typelist, { :prompt => "Select Provider Type" }, { :disabled => (params[:action].to_sym == :edit) } %></p>

  <%= 
      link_to_function "Data Provider Type Information", :class  => 'action_link' do |page|
        page[:data_provider_classes].toggle
      end
   %>  

  <div id="data_provider_classes" style="display:none">

    <strong>SshDataProvider:</strong> This class provides an implementation for a data provider
    where the remote files are accessed through ssh and rsync.
    The provider's files are stored in a flat directory, one
    level deep, directly specified by the object's remote_dir
    attribute. The file "hello" is this stored in a path like this:
    <pre>    /remote_dir/hello</pre>
    <p>

    <% if check_role(:admin) || check_role(:site_manager) %>

      <strong>CbrainSshDataProvider:</strong> This class provides an implementation for a data provider
      where the remote files are accessed through ssh and rsync.
      The provider's files are stored in the 'CBRAIN enhanced
      directory tree'; such a tree stores the file "hello"
      of user "myuser" into a relative path like this:
      <pre>    /remote_dir/myuser/01/23/hello</pre>
      where the components "01" and "23" are computed based on the "hello" string.
      <p>

      <strong>CbrainLocalDataProvider:</strong> This class provides an implementation for a data provider
      where the remote files are not even remote, they are local
      to the currently running rails application. The provider's
      files are stored in the 'cbrain enhanced
      directory tree'; such a tree stores the file "hello"
      of user "myuser" into a relative path like this:
      <pre>    /root_dir/myuser/01/23/hello</pre>
      where root_dir is the data provider's remote_dir (a local
      directory) and the components "01" and "23" are computed based
      on the hello string.
      <p>
      This data provider does not cache anything! The 'remote' files
      are in fact all local, and accesing the 'cached' files mean
      accessing the real provider's files. All methods are adjusted
      so that their behavior is sensible.
      <p>

      <strong>CbrainSmartDataProvider:</strong> This class implements a 'wrapper' data provider that
      acts either as a CbrainLocalDataProvider or a CbrainSshDataProvider
      depending on whether or not the current hostname matches
      the value of the attribute remote_host.
      This means that in the case where the current Rails application
      runs on the same machine as the data provider, the faster
      and more efficient CbrainLocalDataProvider will be used.
      <p>

      <strong>EnCbrain*DataProvider:</strong> These three providers are <strong>en</strong>hanced variations
      on the other three Cbrain*DataProviders described above. They differ
      in how the store their files. The path to file is no longer based
      on its owner or the filename, but instead uniquely determined by
      the file's ID. A file named "hello" with ID 41233 will be stored
      like this:
      <pre>    /root_dir/04/12/33/hello</pre>
      Such data providers have the advantage that files can be renamed and
      reassigned to new owners with minimal modifications on the filesystem's
      structure. The EnCbrain*DataProviders are the officially recommended
      data providers for production deployment.
      <p>

      <strong>VaultSshDataProvider:</strong> This class provides an implementation for a data provider
      where the remote files are accessed through ssh and rsync.
      The provider's files are stored in a flat directory, two levels
      deep, directly specified by the object's remote_dir
      attribute and the user's login name. The file "hello"
      of user "myuser" is thus stored into a path like this:
      <pre>    /remote_dir/myuser/hello</pre>
      <p>

      <strong>VaultLocalDataProvider:</strong> This class provides an implementation for a data provider
      where the remote files are not even remote, they are local
      to the currently running rails application. The provider's
      files are stored in a flat directory, two levels
      deep, directly specified by the object's remote_dir
      attribute and the user's login name. The file "hello"
      of user "myuser" is thus stored into a path like this:
      <pre>    /root_dir/myuser/hello</pre>
      where root_dir is the data provider's remote_dir (a local
      directory).
      <p>
      This data provider does not cache anything! The 'remote' files
      are in fact all local, and accessing the 'cached' files mean
      accessing the real provider's files. All methods are adjusted
      so that their behavior is sensible.
      <p>

      <strong>VaultSmartDataProvider:</strong> This class implements a 'wrapper' data provider that
      acts either as a VaultLocalDataProvider or a VaultSshDataProvider
      depending on whether or not the current hostname matches
      the value of the attribute remote_host.
      This means that in the case where the current Rails application
      runs on the same machine as the data provider, the faster
      and more efficient VaultLocalDataProvider will be used.
      <p>

      <strong>IncomingVaultSshDataProvider:</strong> This class behaves like the
      VaultSshDataProvider, except that it is browsable. When browsing, only
      the subdirectory named like the login name of the current user will
      be visible. It is perfect for accessing
      a jailed remote_dir for incoming content, where users
      can upload files to these subdirectories on other channels.
    <% end %>
  </div>
</span>

<span title="Owner of this data provider. The owner has full rights to configure and use the data provider.">
  <p><label for="user_id">Owner</label><br/>
    <%= user_select("data_provider[user_id]", :selector => @provider) %>
  </p>
</span>

<span title="Group ownership of this data provider. Group members will have access to the provider, but will not be able configure it.">
  <p><label for="group_id">Group</label><br/>
    <%= group_select("data_provider[group_id]", :selector => @provider) %>
  </p>  
</span>

<span title="Is this data provider currently available for use?">
  <p><label for="online">Status</label><br/>
  <%= f.select :online, { "Online" => true, "Offline" => false }, :prompt => "Select status" %></p>  
</span>

<span title="Is this data provider writable or read-only?">
  <p><label for="read_only">Mode</label><br/>
  <%= f.select :read_only, { "Read/Write" => false, "Read Only" => true }, :prompt => "Select mode" %></p>
</span>

<span title="Is this data provider syncable?">
  <p><label for="not_syncable">Syncability</label><br/>
  <%= f.select :not_syncable, { "Fully syncable" => false, "NOT syncable" => true }, :prompt => "Select syncability" %></p>
</span>

<div class="groupentry">
  <br>
  <strong>Info for Remote Data Providers</strong>
  <span title="Name of the remote machine on which the data provider is located (not required for CbrainLocalDataProvider or VaultLocalDataProvider).">
    <p><label for="remote_host">Remote Hostname</label><br/>
    <%= f.text_field :remote_host %></p>
  </span>

  <span title="Username on the remote machine where the data provider is located (not required for CbrainLocalDataProvider or VaultLocalDataProvider).">
    <p><label for="remote_user">Remote Username</label><br/>
    <%= f.text_field :remote_user %></p>
  </span>

  <span title="Port number used to access remote machine on which the data provider is located (not required for CbrainLocalDataProvider or VaultLocalDataProvider).">
    <p><label for="remote_port">Remote Port Number</label><br/>
    <%= f.text_field :remote_port %></p>
  </span>
</div>

<span title="Directory used for storing files.">
  <p><label for="remote_dir">Directory</label><br/>
  <%= f.text_field :remote_dir %></p>
</span>

