<div class = "box">
<p><b>CBRAIN Project Overview:</b></p>

<p>Medical imaging research necessitates extensive data processing in order to explore the scientific questions of interest. This need has led to the development of an extensive array of data processing tools and complete processing workflows. However, given that these tools have been developed across a variable set of software environments, their execution may require specific operating system or software library configurations which limit their adoption rate and lead to frequent recreation of similar tools at different sites.  We  are developing a distributed middleware layer which encapsulates both the software environment and the specific processing tools enabling sites to execute processing tools within their ideal environments without having to reconfigure their own computer systems for each toolset.  Furthermore, the platform supports dynamic provisioning in addition to allowing processing demand to overflow from member computational facilities including the high-performance computing (HPC) facilities of Consortium Laval, Universit&eacute; du Qu&eacute;bec, McGill and Eastern Quebec (CLUMEQ), R&eacute;seau qu&eacute;b&eacute;cois de calcul de haute performance (RQCHP) and other HPCs under Compute Canada to commercial virtual resource suppliers such as the Amazon Elastic Cloud or the Sun Grid Compute Utility.</p>

<p>Typical applications of data processing tools involve chaining sets of tools together into pipelines or workflows.  These workflows have, in some cases, grown to become complete applications in their own right, while other workflows are specified on demand to support a particular avenue of research. The design of workflows is an active field of research within the brain imaging community and the platform will support this area of work through the use of Resource Oriented Architecture (ROA).  Consequently, we will develop web services to support dynamic provisioning as well interfaces to a number of existing processing tools.  This will lead us to a leveraging of resource oriented architecture as the technological basis for workflow development.  Simultaneously, we will update the core of our existing toolset to seamlessly access data across a grid further supporting the network capabilities of the platform.</p>

<p>Users of the imaging platform are as varied as the tools within it. While many researchers contribute to the development of our existing platform, a far greater number are interested only in using the the tools for analysis without becoming developers themselves. In addition to providing graphical user interfaces to the algorithms, we have developed a web portal which will provide intuitive access to the network platform, enhance the communication channels in use for distributed projects, enable resource managers to monitor those resources under their control and permit users to apply workflows to their data.</p>

<p>Finally, although the platform will be developed for use in brain imaging research, much of the fundamental grid middleware, Resource Oriented Architecture (ROA), and virtual organization (VO) policies and their supporting components will be reusable for other medical imaging applications. This will enable research networks in other domains to easily adapt the brain imaging platform to their fields of interest. Additionally, given the flexibility of the platform being developed, we anticipate extending the network deployment to the benefit of our ongoing international collaborations in Europe and Asia after the NEP program is completed.</p>
</div>

<div class = "box">
  <h3>Subversion Revision information</h3>
  <p><strong>CBRAIN Revision:</strong> <%= @revinfo['Revision'] %></p>
  <p><strong>Portal Last Changed Author:</strong> <%= @revinfo['Last Changed Author'] %></p>
  <p><strong>Portal Last Changed Revision:</strong> <%= @revinfo['Last Changed Rev'] %></p>
  <p><strong>Portal Last Changed Date:</strong> <%= h(to_localtime(@revinfo['Last Changed Date'],:datetime)) %></p>
  <p><strong>Portal Up Since:</strong> <%= h(to_localtime(CBRAIN::Startup_LocalTime,:datetime)) %> (for: <%= pretty_elapsed((Time.now.localtime - CBRAIN::Startup_LocalTime).to_i) %>)</p>
</div>
